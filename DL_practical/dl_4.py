# -*- coding: utf-8 -*-
"""DL_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TjBXEQspG8dWkjRVQu9ODtY8qbZ9LqnY
"""

!pip install yfinance
!pip install scikit-learn

import yfinance as yf
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Si, Dense
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# load data
data = yf.download('AAPL', start='2020-01-01', end='2023-01-01')
data = data[['Close']]  # Select 'Close' prices only
data['Close'] = data['Close'].fillna(method='ffill')  # Handle missing values

# Scaling
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data[['Close']])

train_size = int(len(scaled_data) * 0.8)
scaled_train_data = scaled_data[:train_size]
scaled_test_data = scaled_data[train_size:]

# Split dataset
def create_dataset(data, seq_length):
    X, Y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length, 0])
        Y.append(data[i + seq_length, 0])
    return np.array(X), np.array(Y)

seq_length = 60  # Look-back window size
X_train, y_train = create_dataset(scaled_train_data, seq_length)
X_test, y_test = create_dataset(scaled_test_data, seq_length)

# reshape dataset
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# model
model = Sequential()
model.add(SimpleRNN(50, activation='relu', input_shape=(seq_length, 1), return_sequences=False))
model.add(Dense(1))

model.summary()

# compile model and train
model.compile(optimizer='adam', loss='mse')
losses = model.fit(X_train, y_train,
                   batch_size=32,
                   epochs=20,
                   validation_data=(X_test, y_test),
                   verbose=2)

# evaluate
loss = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss:.4f}")

# Predicting the stock prices
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform predictions
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

# Prepare for plotting
train_predict_plot = np.empty_like(scaled_data)
train_predict_plot[:, :] = np.nan
train_predict_plot[seq_length:seq_length + len(train_predict), 0] = train_predict[:, 0]

test_predict_plot = np.empty_like(scaled_data)
test_predict_plot[:, :] = np.nan
test_predict_plot[train_size + seq_length:train_size + seq_length + len(test_predict), 0] = test_predict[:, 0]

# Plotting
plt.figure(figsize=(14, 5))
plt.plot(data.index, data['Close'], label="Actual Price", color='blue')
plt.plot(data.index, train_predict_plot, label="Train Price", color='orange')
plt.plot(data.index, test_predict_plot, label="Test Price", color='red')
plt.title("Stock Price Prediction")
plt.xlabel("Date")
plt.ylabel("Stock Price")
plt.legend(loc="lower right")
plt.show()