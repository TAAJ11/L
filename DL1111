import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# Check if the MNIST dataset is available offline in the cache
# If not, it will be automatically downloaded the first time this code is run

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the images to a range of 0-1 by dividing by 255
x_train, x_test = x_train / 255.0, x_test / 255.0

# Reshape the data to flatten the 28x28 images into vectors of size 784
x_train = x_train.reshape(-1, 28 * 28)
x_test = x_test.reshape(-1, 28 * 28)

# Convert the labels to one-hot encoding
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build the Feedforward Neural Network model
model = models.Sequential([
    # Input layer (Flatten 28x28 images to a vector of size 784)
    layers.Dense(128, activation='relu', input_shape=(28*28,)),
    # Hidden layer
    layers.Dense(64, activation='relu'),
    # Output layer (10 neurons for the 10 classes)
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(x_train, y_train, epochs=10, batch_size=64, validation_data=(x_test, y_test))

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc}")

# Plot training and validation accuracy
plt.plot(history.history['accuracy'], label='Training accuracy')
plt.plot(history.history['val_accuracy'], label='Validation accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plot training and validation loss
plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Make predictions on the test data
predictions = model.predict(x_test)

# Print the predicted class for the first test image
predicted_class = predictions[0].argmax()
print(f"Predicted class for first test image: {predicted_class}")

# Visualize first 5 test images and their predictions
for i in range(5):
    plt.imshow(x_test[i].reshape(28, 28), cmap='gray')
    plt.title(f"True label: {y_test[i].argmax()} Predicted: {predictions[i].argmax()}")
    plt.show()
